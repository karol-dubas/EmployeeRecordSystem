@page "/groups"
@page "/groups/{groupId:guid}"
@inject EmployeeHttpService _employeeHttpService
@inject GroupHttpService _groupHttpService;
@inject BreadcrumbStateContainer _breadcrumbs
@inject BreadcrumbBuilder _breadcrumbBuilder
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }
</style>

<MudPaper Elevation="25" Class="mb-8">
    <MudToolBar>
        <MudTooltip Text="Ukryj puste grupy">
            <MudIconButton Icon="@Icons.Filled.Compress" Color="Color.Primary" @onclick="HideEmptyGroups" />
        </MudTooltip>
        <MudTooltip Text="Zwiń/rozwiń">
            <MudIconButton Icon="@Icons.Filled.ExpandMore" Color="Color.Primary" @onclick="ToggleExpand" />
        </MudTooltip>
        <MudTooltip Text="@PageNames.MyGroup">
            <MudIconButton Icon="@MyIcons.MyGroup" Color="Color.Primary" @onclick="NavigateToEmployeeGroup" />
        </MudTooltip>
        <MudSpacer />
        <AuthorizeView Roles="@Roles.Admin">
            <MudTooltip Text="Dodaj nową grupę">
                <MudIconButton Icon="@Icons.Filled.Add" Color="Color.Primary" @onclick="CreateGroup" />
            </MudTooltip>
            <MudTooltip Text="Przekonwertuj czas pracy wszystkich pracowników na saldo">
                <MudIconButton Icon="@Icons.Filled.AttachMoney" Color="Color.Warning" @onclick="() => ConvertWorkTimeToBalance()" />
            </MudTooltip>
        </AuthorizeView>
    </MudToolBar>
</MudPaper>

<MudPaper Elevation="25">
    @* Table for employees *@
    <MudTable Hover="true"
              Items="@employeesInGroup"
              GroupBy="@_groupDefinition"
              GroupHeaderStyle="background-color:var(--mud-palette-background)"
              Dense="true">
        <HeaderContent>
            <MudTh>Imię</MudTh>
            <MudTh>Nazwisko</MudTh>
            <MudTh>Rola</MudTh>
            <AuthorizeView Roles="@Roles.Admin">
                <MudTh>Stawka godzinowa</MudTh>
                <MudTh>Czas przepracowany</MudTh>
                <MudTh>Notatka</MudTh>
            </AuthorizeView>
            <MudTh></MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="7">
                <div class="d-flex">
                    @if (IsContainerForEmployeesWithNoGroup((Guid)context.Key))
                    {
                        <span>Brak grupy</span>
                    }
                    else
                    {
                        @context.Items.Select(i => i.Group).First().Name
                    }
                    <MudSpacer/>
                    <AuthorizeView Context="auth" Roles="@Roles.Admin">
                        <MudTooltip Text="Usuń grupę">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" @onclick="() => DeleteGroup((Guid)context.Key)"/>
                        </MudTooltip>
                        <MudTooltip Text="Zmień nazwę grupy">
                            <MudIconButton Icon="@Icons.Filled.DriveFileRenameOutline" Size="Size.Small" Color="Color.Primary" @onclick="() => RenameGroup((Guid)context.Key)"/>
                        </MudTooltip>
                    </AuthorizeView>
                    <AuthorizeView Context="auth">
                        @if (IsAdminOrGroupSupervisor(auth, (Guid)context.Key))
                        {
                            <MudTooltip Text="Edytuj czas pracy pracowników">
                                <MudIconButton Icon="@MyIcons.WorkTime" Size="Size.Small" Color="Color.Primary" @onclick="() => EditGroupWorkTime(context.Items)"/>
                            </MudTooltip>
                        }
                    </AuthorizeView>
                    <AuthorizeView Context="auth" Roles="@Roles.Admin">
                        <MudTooltip Text="Przekonweruj czas pracy pracowników na ich saldo">
                            <MudIconButton Icon="@Icons.Filled.AttachMoney" Size="Size.Small" Color="Color.Warning" @onclick="() => ConvertWorkTimeToBalance((Guid)context.Key)"/>
                        </MudTooltip>
                    </AuthorizeView>
                </div>
            </MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="Imię">@context.FirstName</MudTd>
            <MudTd DataLabel="Nazwisko">@context.LastName</MudTd>
            <MudTd DataLabel="Rola">@context.Role</MudTd>
            <AuthorizeView Context="auth" Roles="@Roles.Admin">
                <MudTd DataLabel="Stawka godzinowa">@context.HourlyPay</MudTd>
                <MudTd DataLabel="Czas przepracowany">@context.TimeWorked</MudTd>
                <MudTd DataLabel="Notatka">
                    @if (!string.IsNullOrWhiteSpace(context.Note))
                    {
                        <MudTooltip Text="@context.Note">
                            <MudIcon Icon="@Icons.Outlined.StickyNote2" Color="Color.Primary" />
                        </MudTooltip>
                    }
                </MudTd>
            </AuthorizeView>
            <MudTd DataLabel="">
                <div class="d-flex gap-3 justify-end">
                    <AuthorizeView Context="auth" Roles="@Roles.Admin">
                        @if (!IsContainerForEmployeesWithNoGroup(context.Group.Id))
                        {
                            <MudTooltip Text="Usuń pracownika z grupy">
                                <MudIconButton Icon="@Icons.Material.Filled.PersonRemove" Size="Size.Small" Color="Color.Error" @onclick="() => RemoveFormGroup(context.Id)"/>
                            </MudTooltip>
                        }
                        <MudTooltip Text="Zmień grupę pracownika">
                            <MudMenu Icon="@Icons.Material.Filled.SwapVert" Size="Size.Small" Color="Color.Primary">
                                @foreach (var group in allGroups)
                                {
                                    <MudMenuItem @onclick="() => ChangeGroup(context.Id, group.Id)">@group.Name</MudMenuItem>
                                }
                            </MudMenu>
                        </MudTooltip>
                        <MudTooltip Text="@PageNames.EmployeeDetails">
                            <MudIconButton Icon="@MyIcons.EmployeeDetails" Size="Size.Small" Color="Color.Primary" @onclick="() => _nav.NavigateToEmployeeDetails(context.Id)"/>
                        </MudTooltip>
                    </AuthorizeView>
                    <AuthorizeView Context="auth">
                        @if (IsAdminOrGroupSupervisor(auth, context.Group.Id))
                        {
                            <MudTooltip Text="Edytuj czas pracy pracownika">
                                <MudIconButton Icon="@MyIcons.WorkTime" Size="Size.Small" Color="Color.Primary" @onclick="() => EditEmployeeWorkTime(context)"/>
                            </MudTooltip>
                        }
                    </AuthorizeView>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
    @* Table for empty groups *@
    <MudTable Hover="true"
              Items="@emptyGroups"
              GroupBy="@_emptyGroupDefinition"
              GroupHeaderStyle="background-color:var(--mud-palette-background)"
              HeaderClass="d-none"
              Dense="true">
        <HeaderContent>
            <MudTh>Imię</MudTh>
            <MudTh>Nazwisko</MudTh>
            <MudTh>Stawka godzinowa</MudTh>
            <MudTh>Czas przepracowany</MudTh>
            <MudTh>Rola</MudTh>
            <MudTh>Notatka</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="7">
                <div class="d-flex">
                    @* Group name *@ @(context.Items.Select(i => i.Group).First().Name)
                    <MudSpacer />
                    <AuthorizeView Context="auth" Roles="@Roles.Admin">
                        <MudTooltip Text="Usuń grupę">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" @onclick="() => DeleteGroup((Guid)context.Key)" />
                        </MudTooltip>
                        <MudTooltip Text="Zmień nazwę grupy">
                            <MudIconButton Icon="@Icons.Filled.DriveFileRenameOutline" Size="Size.Small" Color="Color.Primary" @onclick="() => RenameGroup((Guid)context.Key)" />
                        </MudTooltip>
                    </AuthorizeView>
                </div>
            </MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="Imię"></MudTd>
            <MudTd DataLabel="Nazwisko"></MudTd>
            <MudTd DataLabel="Stawka godzinowa"></MudTd>
            <MudTd DataLabel="Czas przepracowany"></MudTd>
            <MudTd DataLabel="Rola"></MudTd>
            <MudTd DataLabel="Notatka"></MudTd>
            <MudTd DataLabel=""></MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    [Parameter] public Guid GroupId { get; set; }

    List<EmployeeInGroupDto> employeesInGroup = new();
    List<EmployeeInGroupDto> emptyGroups = new();
    List<GroupDto> allGroups = new();

    TableGroupDefinition<EmployeeInGroupDto> _groupDefinition = new()
    {
        Expandable = true,
        IsInitiallyExpanded = true,
        Selector = s => s.Group.Id
    };

    TableGroupDefinition<EmployeeInGroupDto> _emptyGroupDefinition = new()
    {
        Expandable = false,
        IsInitiallyExpanded = false,
        Selector = s => s.Group.Id
    };

    protected override async Task OnInitializedAsync()
    {
        CreateBreadcrumbs();
        await GetItems();
    }

    private void CreateBreadcrumbs()
    {
        _breadcrumbs.Items = _breadcrumbBuilder
            .AddHome()
            .AddGroups()
            .Build();
    }

    bool IsContainerForEmployeesWithNoGroup(Guid groupId) => groupId == Guid.Empty;

    /// <summary>
    ///     Get all groups & employees
    /// </summary>
    async Task GetItems()
    {
        this.allGroups = (await _groupHttpService.GetAllAsync()).DeserializedContent;
        var employees = (await _employeeHttpService.GetAllAsync()).DeserializedContent;

        // Add employees without group to a special container
        foreach (var employee in employees.Where(e => e.Group is null))
            employee.Group = new GroupDto { Id = Guid.Empty };

        // Add empty groups
        var emptyGroups = allGroups.Where(g => g.IsEmpty)
            .ToList()
            .Select(g => new EmployeeInGroupDto { Group = g })
            .ToList();

        ChangeRoleDisplayValue(employees);

        this.employeesInGroup = employees;
        this.emptyGroups = emptyGroups;
    }

    void ChangeRoleDisplayValue(List<EmployeeInGroupDto> employees)
    {
        foreach (var employee in employees)
            employee.Role = employee.Role.TranslateRole();
    }

    async Task CreateGroup()
    {
        var result = await _dialogService.Show<NewName_Dialog>("Nowa grupa").Result;

        if (result.Cancelled)
            return;

        var request = new CreateGroupRequest() { Name = result.Data as string };
        var response = await _groupHttpService.CreateAsync(request);

        if (!response.IsSuccessStatusCode)
            return;

        var groupDto = new EmployeeInGroupDto
        {
            Group = new GroupDto()
            {
                Name = response.DeserializedContent.Name,
                Id = response.DeserializedContent.Id
            }
        };

        emptyGroups.Add(groupDto);
        _snackbar.Add("Grupa została utworzona", Severity.Success);
    }

    async Task RemoveFormGroup(Guid employeeId)
    {
        var response = await _groupHttpService.RemoveEmployeeFromGroupAsync(employeeId);

        if (!response.IsSuccessStatusCode)
            return;

        _snackbar.Add("Pracownik został usunięty z grupy", Severity.Success);
        await GetItems();
    }

    async Task ChangeGroup(Guid employeeId, Guid groupId)
    {
        var response = await _groupHttpService.AssignEmployeeToGroupAsync(groupId, employeeId);
        if (!response.IsSuccessStatusCode)
            return;

        _snackbar.Add("Grupa zmieniona pomyślnie", Severity.Success);
        await GetItems();
}

    async Task DeleteGroup(Guid groupId)
    {
        bool? result = await _dialogService.ShowMessageBox(
            "Uwaga",
            "Czy na pewno chcesz usunąć?",
            "Usuń",
            cancelText: "Anuluj");

        if (result != true)
            return;

        var response = await _groupHttpService.DeleteAsync(groupId);
        if (!response.IsSuccessStatusCode)
            return;

        _snackbar.Add("Grupa została usunięta", Severity.Success);
        await GetItems();
    }

    async Task RenameGroup(Guid groupId)
    {
        var result = await _dialogService.Show<NewName_Dialog>("Zmień nazwę grupy").Result;

        if (result.Cancelled)
            return;

        var request = new RenameGroupRequest { Name = result.Data as string };
        var response = await _groupHttpService.RenameAsync(groupId, request);

        if (!response.IsSuccessStatusCode)
            return;

        _snackbar.Add("Nazwa zmieniona pomyślnie", Severity.Success);
        await GetItems();
    }

    async Task EditGroupWorkTime(IEnumerable<EmployeeInGroupDto> employees)
    {
        var parameters = new DialogParameters { ["employees"] = employees };

        bool success = await EditWorkTimeDialog(parameters);
        if (!success)
            return;

        _snackbar.Add("Zmieniono czas pracy pracowników w grupie", Severity.Success);
        await GetItems();
    }

    async Task EditEmployeeWorkTime(EmployeeInGroupDto employee)
    {
        var parameters = new DialogParameters { ["employees"] = new List<EmployeeInGroupDto> { employee } };

        bool success = await EditWorkTimeDialog(parameters);
        if (!success)
            return;

        _snackbar.Add("Zmieniono czas pracy pracownika", Severity.Success);
        await GetItems();
    }

    async Task<bool> EditWorkTimeDialog(DialogParameters parameters)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var result = await _dialogService.Show<EditWorkTime_Dialog>("", parameters, options).Result;

        if (result.Cancelled)
            return false;

        var request = result.Data as ChangeEmployeesWorkTimeRequest;
        var response = await _employeeHttpService.ChangeWorkTimeAsync(request);
        return response.IsSuccessStatusCode;
    }

    async Task ConvertWorkTimeToBalance(Guid? groupId = null)
    {
        var request = new ConvertTimeRequest { GroupId = groupId ?? default };
        var response = await _employeeHttpService.ConvertWorkTimeToBalanceAsync(request);

        if (!response.IsSuccessStatusCode)
            return;

        _snackbar.Add("Przekonwertowano czas pracy pracowników na saldo", Severity.Success);
        await GetItems();
    }

    void HideEmptyGroups()
    {
        // TODO: add implementation
    }

    void ToggleExpand()
    {
        // TODO: add implementation
    }

    void NavigateToEmployeeGroup()
    {
        // TODO: add implementation
    }

    bool IsAdminOrGroupSupervisor(AuthenticationState auth, Guid groupId)
    {
        if (auth.User.IsInRole(Roles.Admin))
            return true;
        
        var supervisor = employeesInGroup.SingleOrDefault(s => s.Id == auth.GetUserId());

        if (supervisor is null)
            return false;
        
        return auth.User.IsInRole(Roles.Supervisor) && groupId == supervisor.Group.Id;
    }
}