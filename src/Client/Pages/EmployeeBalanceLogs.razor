@page "/employee/balance-logs/{employeeId:guid}"
@inject EmployeeHttpService _employeeHttpService
@inject BreadcrumbStateContainer _breadcrumbs
@inject BreadcrumbBuilder _breadcrumbBuilder

<MudTable @ref="table"
          ServerData="@(new Func<TableState, Task<TableData<BalanceLogDto>>>(GetBalanceLogs))"
          Dense="true" Hover="true" Bordered="true" Striped="true" Filter="null" Breakpoint="Breakpoint.Sm">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Historia salda</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="BalanceAfter" T="BalanceLogDto">Typ operacji</MudTableSortLabel></MudTh>
        <MudTh>Kwota</MudTh>
        <MudTh>Saldo przed</MudTh>
        <MudTh>Saldo po</MudTh>
        <MudTh><MudTableSortLabel SortLabel="CreatedAt" T="BalanceLogDto" InitialDirection="SortDirection.Descending">Utworzono</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Typ operacji">@GetOperationType(context)</MudTd>
        <MudTd DataLabel="Kwota">@context.Amount</MudTd>
        <MudTd DataLabel="Saldo przed">@context.BalanceBefore</MudTd>
        <MudTd DataLabel="Saldo po">@context.BalanceAfter</MudTd>
        <MudTd DataLabel="Utworzono">@context.CreatedAt.Humanize()</MudTd>
    </RowTemplate>
   <NoRecordsContent>
        <MudText>Brak wyników</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Ładowanie...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="Ilość elementów"/>
    </PagerContent>
</MudTable>

@code {
    [Parameter] public Guid EmployeeId { get; set; }

    MudTable<BalanceLogDto> table;

    protected override void OnInitialized()
    {
        CreateBreadcrumbs();
    }

    async Task<TableData<BalanceLogDto>> GetBalanceLogs(TableState state)
    {
        var query = new BalanceLogQuery()
        {
            SortBy = state.SortLabel,
            SortDirection = state.SortDirection.ToDescriptionString(),
            PageSize = state.PageSize,
            PageNumber = state.Page + 1,
        };
        
        var result = (await _employeeHttpService.GetBalanceLogsAsync(EmployeeId, query)).DeserializedContent;

        return new TableData<BalanceLogDto>()
        {
            TotalItems = result.TotalItemsCount,
            Items = result.Items
        };
    }

    void CreateBreadcrumbs()
    {
        _breadcrumbs.Items = _breadcrumbBuilder
            .AddHome()
            .AddEmployeeDetails()
            .AddEmployeeBalanceLogs()
            .Build();
    }

    static string GetOperationType(BalanceLogDto dto) => dto switch
    {
        _ when (dto.BalanceBefore > dto.BalanceAfter) => "wypłata",
        _ when (dto.BalanceAfter > dto.BalanceBefore) => "należność",
        _ => "-"
    };
}
