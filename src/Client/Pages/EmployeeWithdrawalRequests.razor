@page "/employee/withdrawal-requests/{employeeId:guid}"
@inject WithdrawalRequestHttpService _withdrawalRequestHttpService
@inject EmployeeHttpService _employeeHttpService
@inject BreadcrumbStateContainer _breadcrumbs
@inject BreadcrumbBuilder _breadcrumbBuilder
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@using Severity = MudBlazor.Severity

<div class="d-flex justify-end">
    <MudButton @onclick="CreateWithdrawalRequest" Variant="Variant.Filled">
        Dodaj żądanie wypłaty
    </MudButton>
</div>

<MudTable @ref="table"
          ServerData="@(new Func<TableState, Task<TableData<WithdrawalRequestDto>>>(GetEmployeeWithdrawalRequests))"
          Dense="true" Hover="true" Bordered="true" Striped="true" Filter="null" Class="mt-5">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Żądania wypłaty</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="CreatedAt" T="WithdrawalRequestDto" InitialDirection="SortDirection.Descending">Stworzono</MudTableSortLabel></MudTh>
        <MudTh>Kwota</MudTh>
        <MudTh><MudTableSortLabel SortLabel="WithdrawalRequestStatusTypeCode" T="WithdrawalRequestDto">Status</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Stworzono">@context.CreatedAt.Humanize()</MudTd>
        <MudTd DataLabel="Kwota">@context.Amount</MudTd>
        <MudTd DataLabel="Status">@context.WithdrawalRequestStatus</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Brak wyników</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Ładowanie...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="Ilość elementów"/>
    </PagerContent>
</MudTable>

@code {
    [Parameter] public Guid EmployeeId { get; set; }

    MudTable<WithdrawalRequestDto> table;

    protected override void OnInitialized()
    {
        CreateBreadcrumbs();
    }

    void CreateBreadcrumbs()
    {
        _breadcrumbs.Items = _breadcrumbBuilder
            .AddHome()
            .AddEmployeeDetails()
            .AddEmployeeWithdrawalRequests()
            .Build();
    }

    async Task<TableData<WithdrawalRequestDto>> GetEmployeeWithdrawalRequests(TableState state)
    {
        var query = new WithdrawalRequestQuery()
        {
            EmployeeId = EmployeeId,
            SortBy = state.SortLabel,
            SortDirection = state.SortDirection.ToDescriptionString(),
            PageSize = state.PageSize,
            PageNumber = state.Page + 1,
        };

        var result = (await _withdrawalRequestHttpService.GetAllAsync(query)).DeserializedContent;

        foreach (var wr in result.Items)
            wr.WithdrawalRequestStatus = wr.WithdrawalRequestStatus.TranslateWithdrawalRequest();

        return new TableData<WithdrawalRequestDto>()
        {
            TotalItems = result.TotalItemsCount,
            Items = result.Items
        };
    }

    async Task CreateWithdrawalRequest()
    {
        var employee = (await _employeeHttpService.GetDetailsAsync(EmployeeId)).DeserializedContent;
        var parameters = new DialogParameters { ["balance"]= employee.EmployeeBilling.Balance };
        var dialog = _dialogService.Show<AddWithdrawalRequest_Dialog>("", parameters);
        var result = await dialog.Result;

        if (result.Cancelled)
            return;

        var request = result.Data as CreateWithdrawalRequestRequest;
        var response = await _withdrawalRequestHttpService.CreateAsync(EmployeeId, request);

        if (!response.IsSuccessStatusCode)
            return;

        await table.ReloadServerData();
        _snackbar.Add("Utworzono żądanie wypłaty", Severity.Success);
    }
}
