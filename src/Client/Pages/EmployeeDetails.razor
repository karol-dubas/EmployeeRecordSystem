@page "/employee/details/{employeeId:guid}"
@inject AuthenticationStateProvider _auth
@inject EmployeeHttpService _employeeHttpService
@inject GroupHttpService _groupHttpService
@inject RoleHttpService _roleHttpService
@inject NavigationManager _nav
@inject BreadcrumbStateContainer _breadcrumbs
@inject BreadcrumbBuilder _breadcrumbBuilder
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

@if (employee is null)
{
    <MudPaper Class="d-flex justify-center" Elevation="0">
        <MudProgressCircular Indeterminate="true" />
    </MudPaper>
}
else
{
    <div class="pa-4">
        <MudStack Spacing="3">
            <MudTextField @bind-Value="employee.FirstName" Label="Imię" Disabled="!editMode" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="employee.LastName" Label="Nazwisko" Disabled="!editMode" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="employee.BankAccountNumber" Label="Numer konta bankowego" Disabled="!editMode" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="employee.Note" Label="Notatka" Disabled="!editMode" Variant="Variant.Text" Lines="2"></MudTextField>

            <MudSelect ToStringFunc="roleToString" T="RoleDto" @bind-Value="selectedRole" Label="Rola" Disabled="!editMode" AdornmentIcon="@editIcon">
                @foreach (var role in roles)
                {
                    <MudSelectItem Value="@role" />
                }
            </MudSelect>
            <MudStack Row="true" AlignItems="AlignItems.End">
                <MudSelect ToStringFunc="groupToString" T="GroupDto" @bind-Value="selectedGroup" Label="Grupa" Disabled="!editMode" AdornmentIcon="@editIcon">
                    @foreach (var group in groups)
                    {
                        <MudSelectItem Value="@group" />
                    }
                </MudSelect>
                <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="RemoveFromGroup" Class="@visibleOnEdit">Usuń z grupy</MudButton>
            </MudStack>
            <MudNumericField @bind-Value="employee.EmployeeBilling.HourlyPay" Label="Stawka godzinowa" Disabled="!editMode" Variant="Variant.Text" Min="0" Max="1000" Step="0.5M" HideSpinButtons="!editMode"></MudNumericField>
            <MudStack Row="true" AlignItems="AlignItems.End">
                <MudTextField @bind-Value="employee.EmployeeBilling.TimeWorked" Label="Czas przepracowany" Disabled="true" Variant="Variant.Text"></MudTextField>
                <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="EditWorkTime" Class="@visibleOnEdit">Edytuj czas pracy</MudButton>
            </MudStack>

            <MudStack Row="true" AlignItems="AlignItems.End">
                <MudTextField @bind-Value="employee.EmployeeBilling.Balance" Label="Saldo" Disabled="true" Variant="Variant.Text"></MudTextField>
                <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="() => _nav.NavigateToEmployeeBalanceLogs(EmployeeId)">Historia salda</MudButton>
                <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="() => _nav.NavigateToEmployeeWithdrawalRequests(EmployeeId)">Wypłaty</MudButton>
            </MudStack>

            <div class="mt-5">
                @if (!editMode)
                {
                    <AuthorizeView Roles="@Roles.Admin">
                        <MudStack Row="true">
                            <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="() => editMode = true">Edytuj</MudButton>
                        </MudStack>
                    </AuthorizeView>
                }
                else
                {
                    <MudStack Row="true">
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Success" @onclick="Save">Zapisz</MudButton>
                        <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="() => editMode = false">Anuluj</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" @onclick="DeleteAccount">Usuń konto</MudButton>
                    </MudStack>
                }
            </div>
        </MudStack>
    </div>
}

@code {
    [Parameter] public Guid EmployeeId { get; set; }

    bool editMode = false;
    string visibleOnEdit => editMode ? "" : "d-none";
    string editIcon => editMode ? Icons.Material.Filled.ArrowDropDown : "null";
    EmployeeDetailsDto employee;
    List<GroupDto> groups = new();
    List<RoleDto> roles = new();
    GroupDto selectedGroup;
    RoleDto selectedRole;
    Func<GroupDto, string> groupToString = g => g == null ? "Brak grupy" : g.Name;
    Func<RoleDto, string> roleToString = g => g.Name;

    protected override async Task OnInitializedAsync()
    {
        CreateBreadcrumbs();

        employee = await GetEmployee();
        InitSelectLists(employee);

        if (await _auth.IsUserInRole(Roles.Admin))
            await GetEditData();

        ChangeRolesDisplayValue();
    }

    void InitSelectLists(EmployeeDetailsDto employee)
    {
        selectedGroup = employee.Group;
        selectedRole = new RoleDto() { Name = employee.Role.TranslateRole() };
    }

    async Task GetEditData()
    {
        groups = (await _groupHttpService.GetAllAsync()).DeserializedContent;
        roles = (await _roleHttpService.GetAllAsync()).DeserializedContent;
    }

    void CreateBreadcrumbs()
    {
        _breadcrumbs.Items = _breadcrumbBuilder
            .AddHome()
            .AddEmployeeDetails()
            .Build();
    }

    async Task<EmployeeDetailsDto> GetEmployee()
    {
        return (await _employeeHttpService.GetDetailsAsync(EmployeeId)).DeserializedContent;
    }

    void ChangeRolesDisplayValue()
    {
        if (roles is null)
            return;

        foreach (var role in roles)
            role.Name = role.Name.TranslateRole();

        StateHasChanged();
    }

    async Task Save()
    {
        bool groupChanged = employee.Group?.Id != selectedGroup?.Id;
        if (groupChanged)
            await ChangeGroup();

        bool roleChanged = employee.Role != selectedRole.Name;
        if (roleChanged)
            await ChangeRole();

        await ChangeHourlyPay();

        var request = new EditEmployeeRequest()
        {
            BankAccountNumber = employee.BankAccountNumber,
            FirstName = employee.FirstName,
            LastName = employee.LastName,
            Note = employee.Note
        };

        var response = await _employeeHttpService.EditAsync(EmployeeId, request);
        if (!response.IsSuccessStatusCode)
            return;

        editMode = false;
        _snackbar.Add("Użytkownik edytowany pomyślnie", Severity.Success);
    }

    async Task ChangeHourlyPay()
    {
        var request = new ChangeEmployeeHourlyPayRequest() { HourlyPay = employee.EmployeeBilling.HourlyPay };
        var response = await _employeeHttpService.ChangeHourlyPayAsync(EmployeeId, request);

        if (!response.IsSuccessStatusCode)
            return;

        _snackbar.Add("Stawka została zmieniona", Severity.Success);
    }

    async Task ChangeGroup()
    {
        var response = await _groupHttpService.AssignEmployeeToGroupAsync(selectedGroup.Id, EmployeeId);

        if (!response.IsSuccessStatusCode)
            return;

        _snackbar.Add("Grupa została zmieniona", Severity.Success);
    }

    async Task ChangeRole()
    {
        var response = await _roleHttpService.ChangeEmployeeRoleAsync(EmployeeId, selectedRole.Id);

        if (!response.IsSuccessStatusCode)
            return;

        _snackbar.Add("Rola została zmieniona", Severity.Success);
    }

    async Task EditWorkTime()
    {
        var employeeInGroupDto = new EmployeeInGroupDto
        {
            Id = EmployeeId,
            FirstName = employee.FirstName,
            LastName = employee.LastName,
            HourlyPay = employee.EmployeeBilling.HourlyPay.ToString(),
            Role = employee.Role,
            TimeWorked = employee.EmployeeBilling.TimeWorked.ToString()
        };

        var parameters = new DialogParameters { ["employees"] = new List<EmployeeInGroupDto> { employeeInGroupDto }};

        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var result = await _dialogService.Show<EditWorkTime_Dialog>("", parameters, options).Result;

        if (result.Cancelled)
            return;

        var request = result.Data as ChangeEmployeesWorkTimeRequest;
        var response = await _employeeHttpService.ChangeWorkTimeAsync(request);

        if (!response.IsSuccessStatusCode)
            return;

        _snackbar.Add("Zmieniono czas pracy", Severity.Success);
        await GetEmployee();
    }

    async Task DeleteAccount()
    {
        bool? result = await _dialogService.ShowMessageBox(
            "Uwaga",
            "Czy na pewno chcesz usunąć?",
            yesText: "Usuń",
            cancelText: "Anuluj");

        StateHasChanged();

        if (result == false)
            return;

        // TODO: delete account (Identity redirect?)
    }

    async Task RemoveFromGroup()
    {
        var response = await _groupHttpService.RemoveEmployeeFromGroupAsync(EmployeeId);

        if (!response.IsSuccessStatusCode)
            return;

        _snackbar.Add("Usunięto z grupy", Severity.Success);
    }
}
