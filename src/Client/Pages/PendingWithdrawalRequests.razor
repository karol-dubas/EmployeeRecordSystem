@page "/withdrawal-requests/pending"
@inject WithdrawalRequestHttpService _withdrawalRequestHttpService
@inject NavigationManager _nav
@inject BreadcrumbStateContainer _breadcrumbs
@inject BreadcrumbBuilder _breadcrumbBuilder
@inject ISnackbar _snackbar
@attribute [Authorize(Roles = Roles.Admin)]
@using Severity = MudBlazor.Severity

<MudTable @ref="table"
          ServerData="@(new Func<TableState, Task<TableData<WithdrawalRequestDto>>>(GetPendingWithdrawalRequestsAsync))"
          Dense="true" Hover="true" Bordered="true" Striped="false" Filter="null">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Oczekujące żądania wypłaty</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(OnSearch)" Placeholder="Wyszukaj pracownika" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="CreatedAt" T="WithdrawalRequestDto">Stworzono</MudTableSortLabel></MudTh>
        <MudTh>Kwota</MudTh>
        <MudTh>Pracownik</MudTh>
        <MudTh>Nr konta bankowego</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Stworzono">@context.CreatedAt</MudTd>
        <MudTd DataLabel="Kwota">@context.Amount</MudTd>
        <MudTd DataLabel="Pracownik" @onclick="() => NavigateToEmployee(context.EmployeeId)" class="cursor-pointer">@context.EmployeeFullName</MudTd>
        <MudTd DataLabel="Nr konta bankowego">@context.EmployeeBankAccountNumber</MudTd>
        <MudTd DataLabel="">
            <MudChipSet Class="d-flex justify-center gap-8">
                <MudChip Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Color="Color.Success" @onclick="() => AcceptWithdrawalRequest(context.Id)">Akceptuj</MudChip>
                <MudChip Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Color="Color.Error" @onclick="() => DenyWithdrawalRequest(context.Id)">Odrzuć</MudChip>
            </MudChipSet>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Brak wyników</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Ładowanie...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="Ilość elementów"/>
    </PagerContent>
</MudTable>

@code {
    MudTable<WithdrawalRequestDto> table;
    string nameSearch;

    protected override void OnInitialized()
    {
        CreateBreadcrumbs();
    }

    private void CreateBreadcrumbs()
    {
        _breadcrumbs.Items = _breadcrumbBuilder
            .AddHome()
            .AddPendingWithdrawalRequests()
            .Build();
    }

    async Task<TableData<WithdrawalRequestDto>> GetPendingWithdrawalRequestsAsync(TableState state)
    {
        var query = new WithdrawalRequestQuery()
        {
            WithdrawalRequestStatus = WithdrawalRequestStatusTypeCodes.Pending,
            NameSearch = nameSearch,
            SortBy = state.SortLabel,
            SortDirection = state.SortDirection.ToDescriptionString(),
            PageSize = state.PageSize,
            PageNumber = state.Page + 1
        };
        
        var result = (await _withdrawalRequestHttpService.GetAllAsync(query)).DeserializedContent;
        
        return new TableData<WithdrawalRequestDto>()
        {
            TotalItems = result.TotalItemsCount,
            Items = result.Items
        };
    }

    async Task OnSearch(string text)
    {
        nameSearch = text;
        await table.ReloadServerData();
    }

    void NavigateToEmployee(Guid employeeId)
    {
        _nav.NavigateToEmployeeDetails(employeeId);
    }

    async Task AcceptWithdrawalRequest(Guid withdrawalRequestId)
    {
        var request = new ProcessWithdrawalRequestRequest()
        {
            ChangeStatusTo = WithdrawalRequestStatusTypeCodes.Accepted
        };

        var response = await _withdrawalRequestHttpService.ProcessAsync(withdrawalRequestId, request);

        if (!response.IsSuccessStatusCode)
            return;

        await table.ReloadServerData();
        _snackbar.Add("Zaakceptowano wniosek", Severity.Success);
    }

    async Task DenyWithdrawalRequest(Guid withdrawalRequestId)
    {
        var request = new ProcessWithdrawalRequestRequest()
        {
            ChangeStatusTo = WithdrawalRequestStatusTypeCodes.Denied
        };

        var response = await _withdrawalRequestHttpService.ProcessAsync(withdrawalRequestId, request);
        
        if (!response.IsSuccessStatusCode)
            return;
            
        await table.ReloadServerData();
        _snackbar.Add("Odrzucono wniosek", Severity.Success);
    }
}
