@inject AuthenticationStateProvider _auth
@inject NavigationManager _nav
@inject EmployeeHttpService _employeeHttpService

<MudNavMenu Margin="Margin.Normal" Class="mt-5">
    <MudNavLink @onclick='() => _nav.NavigateTo("/")' Icon="@MyIcons.Home">@PageNames.Home</MudNavLink>
    <MudNavGroup Title="Pracownik" Expanded="true">
        <MudNavLink @onclick="() => _nav.NavigateToEmployeeDetails(userId)" Icon="@MyIcons.EmployeeDetails">@PageNames.EmployeeDetails</MudNavLink>
        <MudNavLink @onclick="() => _nav.NavigateToEmployeeBalanceLogs(userId)" Icon="@MyIcons.BalanceLogs">@PageNames.BalanceLogs</MudNavLink>
        <MudNavLink @onclick="() => _nav.NavigateToEmployeeWithdrawalRequests(userId)" Icon="@MyIcons.WithdrawalRequests">Wypłaty</MudNavLink>
    </MudNavGroup>
    <MudNavGroup Title="Grupy" Expanded="true">
        <MudNavLink @onclick="() => _nav.NavigateToGroups()" Icon="@MyIcons.Groups">@PageNames.Groups</MudNavLink>
        @if (groupId != Guid.Empty)
        {
            <MudNavLink @onclick="() => _nav.NavigateToGroup(groupId)" Icon="@MyIcons.MyGroup">@PageNames.MyGroup</MudNavLink>
        }
    </MudNavGroup>
    <AuthorizeView Roles="@Roles.Admin">
        <MudNavGroup Title="Wnioski" Expanded="true">
            <MudNavLink @onclick="_nav.NavigateToPendingWithdrawalRequests" Icon="@MyIcons.PendingWithdrawalRequests">@PageNames.PendingWithdrawalRequests</MudNavLink>
        </MudNavGroup>
    </AuthorizeView>
</MudNavMenu>

@code {
    bool collapseNavMenu = true;
    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    Guid userId;
    Guid groupId;

    protected override async Task OnInitializedAsync()
    {
        userId = await _auth.GetUserIdAsync();
        await Task.Delay(200);
        if (userId != default)
            groupId = (await _employeeHttpService.GetDetailsAsync(userId)).DeserializedContent.Group.Id;
    }
}
