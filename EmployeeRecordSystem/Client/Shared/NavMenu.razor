@inject AuthenticationStateProvider _auth
@inject NavigationManager _nav
@inject EmployeeHttpService _employeeHttpService

<MudNavMenu Margin="Margin.Normal" Class="mt-5">
    <MudNavLink @onclick="NavigateToHome" Icon="@MyIcons.Home">@PageNames.Home</MudNavLink>
    <MudNavGroup Title="Pracownik" Expanded="true">
        <MudNavLink @onclick="NavigateToEmployeeDetails" Icon="@MyIcons.EmployeeDetails">@PageNames.EmployeeDetails</MudNavLink>
        <MudNavLink @onclick="NavigateToBalanceLogs" Icon="@MyIcons.BalanceLogs">@PageNames.BalanceLogs</MudNavLink>
        <MudNavLink @onclick="NavigateToEmployeeWithdrawalRequests" Icon="@MyIcons.WithdrawalRequests">Wypłaty</MudNavLink>
    </MudNavGroup>
    <MudNavGroup Title="Grupy" Expanded="true">
        <MudNavLink @onclick="() => _nav.NavigateToGroups()" Icon="@MyIcons.Groups">@PageNames.Groups</MudNavLink>
        <MudNavLink @onclick="NavigateToEmployeeGroup" Icon="@MyIcons.MyGroup">@PageNames.MyGroup</MudNavLink>
    </MudNavGroup>
    <MudNavGroup Title="Wnioski" Expanded="true">
        <MudNavLink @onclick="_nav.NavigateToPendingWithdrawalRequests" Icon="@MyIcons.PendingWithdrawalRequests">@PageNames.PendingWithdrawalRequests</MudNavLink>
    </MudNavGroup>
</MudNavMenu>

@code {
    bool collapseNavMenu = true;
    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    void NavigateToHome()
    {
        _nav.NavigateTo("/");
    }

    async Task NavigateToEmployeeDetails()
    {
        Guid userId = await _auth.GetUserIdAsync();
        _nav.NavigateToEmployeeDetails(userId);
    }

    async Task NavigateToBalanceLogs()
    {
        Guid userId = await _auth.GetUserIdAsync();
        _nav.NavigateToEmployeeBalanceLogs(userId);
    }

    async Task NavigateToEmployeeWithdrawalRequests()
    {
        Guid userId = await _auth.GetUserIdAsync();
        _nav.NavigateToEmployeeWithdrawalRequests(userId);
    }

    async Task NavigateToEmployeeGroup()
    {
        // TODO: show nav item only if has group
        Guid userId = await _auth.GetUserIdAsync();
        var employee = await _employeeHttpService.GetDetailsAsync(userId);

        _nav.NavigateToGroup(employee.Group.Id);
    }
}
