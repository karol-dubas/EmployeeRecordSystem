@page "/employee/balance-logs/{employeeId:guid}"
@inject EmployeeHttpService _employeeHttpService
@inject BreadcrumbStateContainer _breadcrumbs

<MudTable Items="@balanceLogs" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="null" Breakpoint="Breakpoint.Sm">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Historia salda</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Wyszukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Typ operacji</MudTh>
        <MudTh>Saldo przed</MudTh>
        <MudTh>Saldo po</MudTh>
        <MudTh>Utworzono</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Typ operacji">@GetOperationType(context)</MudTd>
        <MudTd DataLabel="Saldo przed">@context.BalanceBefore</MudTd>
        <MudTd DataLabel="Saldo po">@context.BalanceAfter</MudTd>
        <MudTd DataLabel="Utworzono">@context.CreatedAt</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public Guid EmployeeId { get; set; }

    string searchString; // TODO: search
    List<BalanceLogDto> balanceLogs = new();

    protected override async Task OnInitializedAsync()
    {
        _breadcrumbs.Items = new BreadcrumbBuilder()
            .AddHome()
            .AddEmployeeDetails()
            .AddEmployeeBalanceLogs()
            .Build();

        balanceLogs = await _employeeHttpService.GetBalanceLogAsync(EmployeeId);
    }

    string GetOperationType(BalanceLogDto dto) => dto switch
    {
        _ when (dto.BalanceBefore > dto.BalanceAfter) => "wypłata",
        _ when (dto.BalanceAfter > dto.BalanceBefore) => "należność",
        _ => ""
    };
}
