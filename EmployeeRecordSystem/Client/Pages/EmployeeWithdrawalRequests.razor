@page "/employee/withdrawal-requests/{employeeId:guid}"
@inject WithdrawalRequestHttpService _withdrawalRequestHttpService
@inject EmployeeHttpService _employeeHttpService
@inject IDialogService _dialogService
@inject BreadcrumbStateContainer _breadcrumbs

<div class="d-flex justify-end">
    <MudButton @onclick="CreateWithdrawalRequest" Variant="Variant.Filled">
        Dodaj żądanie wypłaty
    </MudButton>
</div>

<MudTable Items="@withdrawalRequests" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="null" Class="mt-5">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Żądania wypłaty</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Wyszukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Stworzono</MudTh>
        <MudTh>Kwota</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Stworzono">@context.CreatedAt</MudTd>
        <MudTd DataLabel="Kwota">@context.Amount</MudTd>
        <MudTd DataLabel="Status">@context.WithdrawalRequestStatus</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public Guid EmployeeId { get; set; }

    List<WithdrawalRequestDto> withdrawalRequests;
    string searchString; // TODO: table search

    protected override async Task OnInitializedAsync()
    {
        CreateBreadcrumbs();
        withdrawalRequests = await GetEmployeeWithdrawalRequests();
    }

    void CreateBreadcrumbs()
    {
        _breadcrumbs.Items = new BreadcrumbBuilder()
            .AddHome()
            .AddEmployeeDetails()
            .AddEmployeeWithdrawalRequests()
            .Build();
    }

    async Task<List<WithdrawalRequestDto>> GetEmployeeWithdrawalRequests()
    {
        var query = new WithdrawalRequestQuery()
        {
            EmployeeId = EmployeeId
        };

        withdrawalRequests = (await _withdrawalRequestHttpService.GetAllAsync(query)).DeserializedContent;

        foreach (var wr in withdrawalRequests)
            wr.WithdrawalRequestStatus = wr.WithdrawalRequestStatus.TranslateWithdrawalRequest();
        
        return withdrawalRequests;
    }

    async Task CreateWithdrawalRequest()
    {
        var employee = (await _employeeHttpService.GetDetailsAsync(EmployeeId)).DeserializedContent;
        var parameters = new DialogParameters { ["balance"]= employee.EmployeeBilling.Balance };
        var dialog = _dialogService.Show<AddWithdrawalRequestDialog>("", parameters);
        var result = await dialog.Result;

        if (result.Cancelled)
            return;
        
        var request = result.Data as CreateWithdrawalRequestRequest;
        var response = await _withdrawalRequestHttpService.CreateAsync(EmployeeId, request);
        
        if (response.IsSuccessStatusCode)
        {
            var wr = response.DeserializedContent;
            wr.WithdrawalRequestStatus = wr.WithdrawalRequestStatus.TranslateWithdrawalRequest();
            withdrawalRequests.Add(wr);
        }
    }
}
