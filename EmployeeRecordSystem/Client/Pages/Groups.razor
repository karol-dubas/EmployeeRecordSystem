@page "/groups"
@page "/groups/{groupId:guid}"
@inject GroupHttpService _groupHttpService
@inject EmployeeHttpService _employeeHttpService
@inject BreadcrumbStateContainer _breadcrumbs
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }
</style>

<MudPaper Elevation="25" Class="mb-8">
    <MudToolBar>
        <MudTooltip Text="Ukryj puste grupy">
            <MudIconButton Icon="@Icons.Filled.Compress" Color="Color.Primary" @onclick="HideEmptyGroups" />
        </MudTooltip>
        <MudTooltip Text="Zwiń/rozwiń">
            <MudIconButton Icon="@Icons.Filled.ExpandMore" Color="Color.Primary" @onclick="ToggleExpand" />
        </MudTooltip>
        <MudTooltip Text="@PageNames.MyGroup">
            <MudIconButton Icon="@MyIcons.MyGroup" Color="Color.Primary" @onclick="NavigateToEmployeeGroup" />
        </MudTooltip>
        <MudSpacer />
        <MudTooltip Text="Dodaj nową grupę">
            <MudIconButton Icon="@Icons.Filled.Add" Color="Color.Primary" @onclick="CreateGroup" />
        </MudTooltip>
        <MudTooltip Text="Przekonwertuj czas pracy wszystkich pracowników na saldo">
            <MudIconButton Icon="@Icons.Filled.AttachMoney" Color="Color.Warning" @onclick="() => ConvertWorkTimeToBalance()" />
        </MudTooltip>
    </MudToolBar>
</MudPaper>

<MudPaper Elevation="25">
    @*Table for employees*@
    <MudTable Hover="true"
              Items="@items"
              GroupBy="@_groupDefinition"
              GroupHeaderStyle="background-color:var(--mud-palette-background)"
              Dense="true">
        <HeaderContent>
            <MudTh>Imię</MudTh>
            <MudTh>Nazwisko</MudTh>
            <MudTh>Stawka godzinowa</MudTh>
            <MudTh>Czas przepracowany</MudTh>
            <MudTh>Rola</MudTh>
            <MudTh>Notatka</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="7">
                <div class="d-flex">
                    @(context.Items.Select(i => i.Group).First().Name)
                    <MudSpacer />
                    <MudTooltip Text="Usuń grupę">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" @onclick="() => DeleteGroup((Guid)context.Key)" />
                    </MudTooltip>
                    <MudTooltip Text="Zmień nazwę grupy">
                        <MudIconButton Icon="@Icons.Filled.DriveFileRenameOutline" Size="Size.Small" Color="Color.Primary" @onclick="() => RenameGroup((Guid)context.Key)" />
                    </MudTooltip>
                    <MudTooltip Text="Edytuj czas pracy pracowników">
                        <MudIconButton Icon="@MyIcons.WorkTime" Size="Size.Small" Color="Color.Primary" @onclick="() => EditGroupWorkTime(context.Items)" />
                    </MudTooltip>
                    <MudTooltip Text="Przekonweruj czas pracy pracowników na ich saldo">
                        <MudIconButton Icon="@Icons.Filled.AttachMoney" Size="Size.Small" Color="Color.Warning" @onclick="() => ConvertWorkTimeToBalance((Guid)context.Key)" />
                    </MudTooltip>
                </div>
            </MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="Imię">@context.FirstName</MudTd>
            <MudTd DataLabel="Nazwisko">@context.LastName</MudTd>
            <MudTd DataLabel="Stawka godzinowa">@context.HourlyPay</MudTd>
            <MudTd DataLabel="Czas przepracowany">@context.TimeWorked</MudTd>
            <MudTd DataLabel="Rola">@context.Role</MudTd>
            <MudTd DataLabel="Notatka">
                @if (!string.IsNullOrWhiteSpace(context.Note))
                {
                    <MudTooltip Text="@context.Note">
                        <MudIcon Icon="@Icons.Outlined.StickyNote2" Color="Color.Primary" />
                    </MudTooltip>
                }
            </MudTd>
            <MudTd DataLabel="">
                <div class="d-flex gap-3 justify-end">
                    @if (!IsContainerForEmployeesWithNoGroup(context.Group))
                    {
                        <MudTooltip Text="Usuń pracownika z grupy">
                            <MudIconButton Icon="@Icons.Material.Filled.PersonRemove" Size="Size.Small" Color="Color.Error" @onclick="() => RemoveFormGroup(context.Id)" />
                        </MudTooltip>
                    }
                    <MudTooltip Text="Zmień grupę pracownika">
                        <MudMenu Icon="@Icons.Material.Filled.SwapVert" Size="Size.Small" Color="Color.Primary">
                            @foreach (var group in allGroups)
                            {
                                <MudMenuItem @onclick="() => ChangeGroup(context.Id, group.Id)">@group.Name</MudMenuItem>
                            }
                        </MudMenu>
                    </MudTooltip>
                    <MudTooltip Text="@PageNames.EmployeeDetails">
                        <MudIconButton Icon="@MyIcons.EmployeeDetails" Size="Size.Small" Color="Color.Primary" @onclick="() => _nav.NavigateToEmployeeDetails(context.Id)" />
                    </MudTooltip>
                    <MudTooltip Text="Edytuj czas pracy pracownika">
                        <MudIconButton Icon="@MyIcons.WorkTime" Size="Size.Small" Color="Color.Primary" @onclick="() => EditEmployeeWorkTime(context)" />
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
    @*Table for empty groups*@
    <MudTable Hover="true"
              Items="@items2"
              GroupBy="@_groupDefinition2"
              GroupHeaderStyle="background-color:var(--mud-palette-background)"
              HeaderClass="d-none"
              Dense="true">
        <HeaderContent>
            <MudTh>Imię</MudTh>
            <MudTh>Nazwisko</MudTh>
            <MudTh>Stawka godzinowa</MudTh>
            <MudTh>Czas przepracowany</MudTh>
            <MudTh>Rola</MudTh>
            <MudTh>Notatka</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="7">
                <div class="d-flex">
                    @(context.Items.Select(i => i.Group).First().Name)
                    <MudSpacer />
                    <MudTooltip Text="Usuń grupę">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" @onclick="() => DeleteGroup((Guid)context.Key)" />
                    </MudTooltip>
                    <MudTooltip Text="Zmień nazwę grupy">
                        <MudIconButton Icon="@Icons.Filled.DriveFileRenameOutline" Size="Size.Small" Color="Color.Primary" @onclick="() => RenameGroup((Guid)context.Key)" />
                    </MudTooltip>
                </div>
            </MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="Imię"></MudTd>
            <MudTd DataLabel="Nazwisko"></MudTd>
            <MudTd DataLabel="Stawka godzinowa"></MudTd>
            <MudTd DataLabel="Czas przepracowany"></MudTd>
            <MudTd DataLabel="Rola"></MudTd>
            <MudTd DataLabel="Notatka"></MudTd>
            <MudTd DataLabel=""></MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    [Parameter] public Guid GroupId { get; set; }

    List<EmployeeInGroupDto> items = new();
    List<EmployeeInGroupDto> items2 = new();
    List<GroupDto> allGroups = new();

    TableGroupDefinition<EmployeeInGroupDto> _groupDefinition = new()
        {
            Expandable = true,
            IsInitiallyExpanded = true,
            Selector = s => s.Group.Id
        };

    TableGroupDefinition<EmployeeInGroupDto> _groupDefinition2 = new()
        {
            Expandable = false,
            IsInitiallyExpanded = false,
            Selector = s => s.Group.Id
        };

    protected override async Task OnInitializedAsync()
    {
        _breadcrumbs.Items = new BreadcrumbBuilder()
            .AddHome()
            .AddGroups()
            .Build();

        await GetItems();
    }

    bool IsContainerForEmployeesWithNoGroup(GroupDto group) => group.Id == Guid.Empty;

    /// <summary>
    /// Get all groups and all employees
    /// </summary>
    async Task GetItems()
    {
        this.allGroups = (await _groupHttpService.GetAllAsync()).DeserializedContent;
        var employees = (await _employeeHttpService.GetAllAsync()).DeserializedContent;

        // Add employees without group to a special container
        employees
        .Where(e => e.Group is null)
        .ToList()
        .ForEach(e => e.Group = new GroupDto { Id = Guid.Empty });

        // Add empty groups
        var emptyGroups = allGroups.Where(g => g.IsEmpty)
            .ToList()
            .Select(g => new EmployeeInGroupDto { Group = g })
            .ToList();

        ChangeDisplayValue(employees);

        // Send to display variable
        this.items = employees;
        this.items2 = emptyGroups;
    }

    void ChangeDisplayValue(List<EmployeeInGroupDto> employees)
    {
        employees.ForEach(i =>
        {
            string result = i.Role switch
            {
                Roles.Admin => "Administrator",
                Roles.Supervisor => "Kierownik",
                Roles.Employee => "Pracownik",
                _ => throw new InvalidOperationException()
                };

            i.Role = result;
        });
    }

    async Task CreateGroup()
    {
        var result = await _dialogService.Show<AddGroupDialog>().Result;

        if (result.Cancelled)
            return;

        var request = result.Data as CreateGroupRequest;
        var newGroup = await _groupHttpService.CreateAsync(request);

        await GetItems();
        _snackbar.Add("Grupa została utworzona", Severity.Success);
    }

    async Task RemoveFormGroup(Guid employeeId)
    {
        await _groupHttpService.RemoveEmployeeFromGroupAsync(employeeId);
        _snackbar.Add("Pracownik został usunięty z grupy", Severity.Success);
        await GetItems();
    }

    async Task ChangeGroup(Guid employeeId, Guid groupId)
    {
        await _groupHttpService.AssignEmployeeToGroupAsync(groupId, employeeId);
        _snackbar.Add("Grupa zmieniona pomyślnie", Severity.Success);
        await GetItems();
    }

    async Task DeleteGroup(Guid groupId)
    {
        bool? result = await _dialogService.ShowMessageBox(
            "Uwaga",
            "Czy na pewno chcesz usunąć?",
            "Usuń", cancelText: "Anuluj");

        if (result == true)
        {
            await _groupHttpService.DeleteAsync(groupId);
            _snackbar.Add("Grupa została usunięta", Severity.Success);
            await GetItems();
        }
    }

    async Task RenameGroup(Guid groupId)
    {
        var request = new RenameGroupRequest
        {
            Name = "" // TODO: add rename input
        };

        //await _groupHttpService.RenameAsync(groupId, request);
        _snackbar.Add("Nazwa zmieniona pomyślnie", Severity.Success);
    }

    async Task EditGroupWorkTime(IEnumerable<EmployeeInGroupDto> employees)
    {
        var parameters = new DialogParameters { ["employees"] = employees };

        bool success = await EditWorkTimeDialog(parameters);
        if (!success)
            return;

        _snackbar.Add("Zmieniono czas pracy pracowników w grupie", Severity.Success);
        await GetItems();
    }

    async Task EditEmployeeWorkTime(EmployeeInGroupDto employee)
    {
        var parameters = new DialogParameters { ["employees"] = new List<EmployeeInGroupDto> { employee } };

        bool success = await EditWorkTimeDialog(parameters);
        if (!success)
            return;

        _snackbar.Add("Zmieniono czas pracy pracownika", Severity.Success);
        await GetItems();
    }

    async Task<bool> EditWorkTimeDialog(DialogParameters parameters)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var result = await _dialogService.Show<EditWorkTimeDialog>("", parameters, options).Result;

        if (result.Cancelled)
            return false;

        var request = result.Data as ChangeEmployeesWorkTimeRequest;
        await _employeeHttpService.ChangeWorkTimeAsync(request);
        return true;
    }

    async Task ConvertWorkTimeToBalance(Guid? groupId = null)
    {
        await _employeeHttpService.ConvertWorkTimeToBalanceAsync(new ConvertTimeRequest { GroupId = groupId is null ? default : (Guid)groupId });
        _snackbar.Add("Przekonwertowano czas pracy pracowników na saldo", Severity.Success);

        await GetItems();
    }

    void HideEmptyGroups()
    {
    // TODO: add implementation
    }

    void ToggleExpand()
    {
    // TODO: add implementation
    }

    void NavigateToEmployeeGroup()
    {
    // TODO: add implementation
    }

}